name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      version: ${{ steps.check.outputs.version }}
      package_name: ${{ steps.check.outputs.package_name }}
      npm_version: ${{ steps.check.outputs.npm_version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if version needs publishing
        id: check
        run: |
          # Get version and package name from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          echo "Package: $PACKAGE_NAME"
          echo "Current version: $CURRENT_VERSION"
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check what version is currently published on npm
          NPM_VERSION=$(npm view $PACKAGE_NAME version 2>/dev/null || echo "not-found")
          echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT
          
          # For PRs, check if version is bumped
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "$NPM_VERSION" = "$CURRENT_VERSION" ]; then
              echo "::error::Version must be bumped for PR. Current version ($CURRENT_VERSION) is already published to npm"
              exit 1
            fi
            echo "✅ Version check passed for PR"
            echo "should_publish=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For main branch, check if this version exists on npm
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            if [ "$NPM_VERSION" = "not-found" ]; then
              echo "Package not found on npm registry - will publish"
              echo "should_publish=true" >> $GITHUB_OUTPUT
            elif [ "$NPM_VERSION" = "$CURRENT_VERSION" ]; then
              echo "Version $CURRENT_VERSION already published to npm"
              echo "should_publish=false" >> $GITHUB_OUTPUT
            else
              echo "Current version ($CURRENT_VERSION) differs from npm version ($NPM_VERSION)"
              echo "Will publish new version"
              echo "should_publish=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        bun-version: [latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run tests
        run: bun test
      
      - name: Run tests with coverage
        if: matrix.os == 'ubuntu-latest'
        run: bun test --coverage
      
      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          if-no-files-found: ignore

  benchmark:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run benchmarks
        run: |
          echo "Running lazy vs traditional benchmarks..."
          bun run benchmarks/lazy-vs-traditional.bench.js
          
          echo ""
          echo "Running no logs vs lazy logs benchmarks..."
          bun run benchmarks/no-logs-vs-lazy-logs.bench.js
      
      - name: Store benchmark results
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.sha }}
          path: |
            benchmarks/*.bench.js
            benchmarks/README.md

  lint-and-typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run ESLint
        run: |
          echo "Running ESLint..."
          bun run lint
      
      - name: Type check
        run: |
          echo "Running type checks..."
          bun run --bun tsc --noEmit || true

  publish:
    needs: [test, benchmark, lint-and-typecheck, version-check]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      needs.version-check.outputs.should_publish == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create Git Tag
        run: |
          VERSION="${{ needs.version-check.outputs.version }}"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "${VERSION}" -m "Release ${VERSION}"
          git push origin "${VERSION}"
      
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.version-check.outputs.version }}"
          PACKAGE_NAME="${{ needs.version-check.outputs.package_name }}"
          
          # Create release using GitHub CLI with heredoc
          gh release create "${VERSION}" \
            --title "${VERSION}" \
            --notes "$(cat <<EOF
          ## 🚀 Release ${VERSION}
          
          ### 📦 Installation
          \`\`\`bash
          bun add ${PACKAGE_NAME}@${VERSION}
          # or
          npm install ${PACKAGE_NAME}@${VERSION}
          \`\`\`
          
          ### 📊 Performance
          - Lazy logging is **100-1000x faster** than traditional logging when disabled
          - **238x faster** in production conditions (mixed workload)
          - Minimal overhead compared to no logs at all
          
          ### 🔗 Links
          - [NPM Package](https://www.npmjs.com/package/${PACKAGE_NAME}/v/${VERSION})
          - [Documentation](https://github.com/${{ github.repository }}/blob/${VERSION}/README.md)
          
          ---
          *Published automatically by GitHub Actions*
          EOF
          )"

  summary:
    needs: [test, benchmark, lint-and-typecheck, version-check, publish]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Workflow Summary
        run: |
          echo "## Workflow Summary"
          echo ""
          echo "### Event Information"
          echo "- Event: ${{ github.event_name }}"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo ""
          
          echo "### Job Results"
          echo "- Version Check: ${{ needs.version-check.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Benchmarks: ${{ needs.benchmark.result }}"
          echo "- Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
          
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "- Publish: ${{ needs.publish.result }}"
            
            if [ "${{ needs.version-check.outputs.should_publish }}" == "true" ]; then
              echo ""
              echo "### 📦 Publishing"
              echo "- Package: ${{ needs.version-check.outputs.package_name }}"
              echo "- Version: ${{ needs.version-check.outputs.version }}"
              if [ "${{ needs.publish.result }}" == "success" ]; then
                echo "- Status: ✅ Published successfully!"
                echo "- View on NPM: https://www.npmjs.com/package/${{ needs.version-check.outputs.package_name }}"
              elif [ "${{ needs.publish.result }}" == "skipped" ]; then
                echo "- Status: ⏭️ Skipped (version already published)"
              else
                echo "- Status: ❌ Failed"
              fi
            else
              echo ""
              echo "### 📦 Publishing"
              echo "- Status: ⏭️ Skipped (no version change)"
            fi
          fi
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo ""
            echo "### Pull Request Check"
            echo "All checks completed for PR #${{ github.event.pull_request.number }}"
          fi