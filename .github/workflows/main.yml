name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  version-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history for proper comparison
      
      - name: Check if version was bumped
        id: check
        run: |
          # Get version from current commit
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Try to get version from previous commit
          PREVIOUS_VERSION="0.0.0"
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            # Previous commit exists
            git checkout HEAD~1 2>/dev/null || true
            if [ -f "package.json" ]; then
              PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
            fi
            git checkout - 2>/dev/null || true
          else
            # This is the first commit
            echo "This appears to be the first commit"
            PREVIOUS_VERSION="0.0.0"
          fi
          
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Check if version changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version bumped from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            # Don't fail, just note that version wasn't bumped
            echo "::notice::Version not bumped. Current version: $CURRENT_VERSION"
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        bun-version: [latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run tests
        run: bun test
      
      - name: Run tests with coverage
        run: bun test --coverage
      
      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  benchmark:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        bun-version: [latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run benchmarks
        run: |
          echo "Running lazy vs traditional benchmarks..."
          bun run benchmarks/lazy-vs-traditional.bench.js
          
          echo ""
          echo "Running no logs vs lazy logs benchmarks..."
          bun run benchmarks/no-logs-vs-lazy-logs.bench.js
      
      - name: Store benchmark results
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.sha }}
          path: |
            benchmarks/*.bench.js
            benchmarks/README.md

  lint-and-typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Check code formatting
        run: |
          # Add prettier or other formatting checks if configured
          echo "Checking code formatting..."
          # bun run format:check || true
      
      - name: Type check
        run: |
          echo "Running type checks..."
          bun run --bun tsc --noEmit || true

  publish:
    needs: [test, benchmark, lint-and-typecheck, version-check]
    runs-on: ubuntu-latest
    if: |
      always() &&
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      needs.version-check.result == 'success' &&
      needs.version-check.outputs.changed == 'true' &&
      needs.test.result == 'success' &&
      needs.benchmark.result == 'success'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Build package
        run: |
          echo "Building package..."
          # Add build step if needed
          # bun run build
      
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version-check.outputs.version }}
          release_name: Release v${{ needs.version-check.outputs.version }}
          body: |
            ## ðŸš€ Release v${{ needs.version-check.outputs.version }}
            
            ### ðŸ“Š Performance
            - Lazy logging is 100-1000x faster than traditional logging when disabled
            - Minimal overhead (1.5-5x) compared to no logs for typical operations
            - Production-ready with bitwise level control
            
            ### ðŸ“¦ Installation
            ```bash
            bun add log-lazy@${{ needs.version-check.outputs.version }}
            ```
            
            See [README](https://github.com/${{ github.repository }}/blob/main/README.md) for usage details.
          draft: false
          prerelease: false

  notify:
    needs: [publish, version-check]
    runs-on: ubuntu-latest
    if: needs.publish.result == 'success'
    steps:
      - name: Notify success
        run: |
          echo "âœ… Successfully published log-lazy to npm!"
          echo "ðŸ“¦ Version: ${{ needs.version-check.outputs.version }}"
          echo "ðŸ”— View on npm: https://www.npmjs.com/package/log-lazy"